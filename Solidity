// SPDX-License-Identifier: MIT  
pragma solidity ^0.8.0;

contract PiStaking {
    struct Stake {
        uint256 amount;
        uint256 startTime;
        uint256 duration;
    }

    mapping(address => Stake) public stakes;
    mapping(address => uint256) public rewards;

    uint256 public rewardRate = 10; // 10% reward per annum

    function stake(uint256 _amount, uint256 _duration) public {
        require(_amount > 0, "Amount must be greater than 0");
        require(_duration >= 30 days, "Minimum staking duration is 30 days");

        stakes[msg.sender] = Stake(_amount, block.timestamp, _duration);
    }

    function calculateReward(address _staker) public view returns (uint256) {
        Stake memory stakeData = stakes[_staker];
        if (block.timestamp < stakeData.startTime + stakeData.duration) {
            return 0; // No reward before staking ends
        }

        uint256 stakingPeriod = block.timestamp - stakeData.startTime;
        uint256 reward = (stakeData.amount * rewardRate * stakingPeriod) / (365 days * 100);
        return reward;
    }

    function claimReward() public {
        uint256 reward = calculateReward(msg.sender);
        require(reward > 0, "No reward available");

        rewards[msg.sender] += reward;
        delete stakes[msg.sender]; // Reset staking
    }
}
